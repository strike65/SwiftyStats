//
//  SSSpecialFunctions.swift
//  SwiftyStats
//
//  Created by strike65 on 19.07.17.
//
/*
 Copyright (2017-2019) strike65
 
 GNU GPL 3+
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, version 3 of the License.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


import Foundation
#if os(macOS) || os(iOS)
import os.log
#endif


extension SSSpecialFunctions {
    
    
    /*                            i0.c
     *
     *    Modified Bessel function of order zero
     *
     *
     *
     * SYNOPSIS:
     *
     * double x, y, i0();
     *
     * y = i0( x );
     *
     *
     *
     * DESCRIPTION:
     *
     * Returns modified Bessel function of order zero of the
     * argument.
     *
     * The function is defined as i0(x) = j0( ix ).
     *
     * The range is partitioned into the two intervals [0,8] and
     * (8, infinity).  Chebyshev polynomial expansions are employed
     * in each interval.
     *
     *
     *
     * ACCURACY:
     *
     *                      Relative error:
     * arithmetic   domain     # trials      peak         rms
     *    DEC       0,30         6000       8.2e-17     1.9e-17
     *    IEEE      0,30        30000       5.8e-16     1.4e-16
     *
     */
    /*
     Cephes Math Library Release 2.8:  June, 2000
     Copyright 1984, 1987, 2000 by Stephen L. Moshier
     */

    
    /// Returns the modified Bessel function of order zero I0(x)
    /// - Parameter x: Argument
    ///
    /// - Note
    /// adapted from Cephes with kind permission
    internal static func besselI0<FPT:  SSFloatingPoint & Codable>(x: FPT) -> FPT {
        var y: FPT
        var xx: FPT
        if( x < 0 ) {
            xx = -x
        }
        else {
            xx = x
        }
        if( xx <= 8 ) {
            y = (xx / 2) - 2
            return( SSMath.exp1(xx) * Helper.chebyshevEval(x: y, array: besselAI0(), n: 50 ) )
        }
        else {
            // TODO: H1F1?
            y = 32 / xx - 2
            return(  SSMath.exp1(xx) * Helper.chebyshevEval( x: y, array: besselBI0(), n: 50 ) / xx.squareRoot() )
        }
        
    }
    
    /*                            i0e.c
     *
     *    Modified Bessel function of order zero,
     *    exponentially scaled
     *
     *
     *
     * SYNOPSIS:
     *
     * double x, y, i0e();
     *
     * y = i0e( x );
     *
     *
     *
     * DESCRIPTION:
     *
     * Returns exponentially scaled modified Bessel function
     * of order zero of the argument.
     *
     * The function is defined as i0e(x) = exp(-|x|) j0( ix ).
     *
     *
     *
     * ACCURACY:
     *
     *                      Relative error:
     * arithmetic   domain     # trials      peak         rms
     *    IEEE      0,30        30000       5.4e-16     1.2e-16
     * See i0().
     *
     */
    /*
     Cephes Math Library Release 2.8:  June, 2000
     Copyright 1984, 1987, 2000 by Stephen L. Moshier
     */


    
    /// Returns the exponentially scaled modified Bessel function of order zero I0(x) / exp(x)
    /// - Parameter x: Argument
    ///
    /// - Note
    /// adapted from Cephes with kind permission
    ///
    /// ###Original Description###
    ///
    internal static func besselI0e<FPT: SSFloatingPoint & Codable>(x: FPT) -> FPT {
        var y: FPT
        var xx: FPT
        
        if( x < 0 ) {
            xx = -x
        }
        else {
            xx = x
        }
        if( xx <= 8 ) {
            y = (xx / 2) - 2
            return ( Helper.chebyshevEval( x: y, array: besselAI0(), n: 50 ) )
        }
        else {
            return (  Helper.chebyshevEval( x: 32 / xx - 2, array: besselBI0(), n: 50) / xx.squareRoot() )
        }
    }
    /*                            i1.c
     *
     *    Modified Bessel function of order one
     *
     *
     *
     * SYNOPSIS:
     *
     * double x, y, i1();
     *
     * y = i1( x );
     *
     *
     *
     * DESCRIPTION:
     *
     * Returns modified Bessel function of order one of the
     * argument.
     *
     * The function is defined as i1(x) = -i j1( ix ).
     *
     * The range is partitioned into the two intervals [0,8] and
     * (8, infinity).  Chebyshev polynomial expansions are employed
     * in each interval.
     *
     *
     *
     * ACCURACY:
     *
     *                      Relative error:
     * arithmetic   domain     # trials      peak         rms
     *    DEC       0, 30        3400       1.2e-16     2.3e-17
     *    IEEE      0, 30       30000       1.9e-15     2.1e-16
     *
     *
     */

    /// Returns the modified Bessel function of order one I1(x)
    /// - Parameter x: Argument
    ///
    /// ###Note###
    /// adapted from Cephes with kind permission
    internal static func besselI1<FPT: SSFloatingPoint & Codable>(x: FPT) -> FPT {
        var y, z: FPT
        z = abs(x)
        if( z <= 8 ) {
            y = (z / 2) - 2
            z = Helper.chebyshevEval(x: y, array: besselAJ(), n: 50 ) * z * SSMath.exp1(z)
        }
        else {
            z = SSMath.exp1(z) * Helper.chebyshevEval(x: 32 / z - 2, array: besselBJ(), n: 50 ) / sqrt(z)
        }
        if( x < 0 ) {
            z = -z
        }
        return z
    }
    
    
    /*                            i1e.c
     *
     *    Modified Bessel function of order one,
     *    exponentially scaled
     *
     *
     *
     * SYNOPSIS:
     *
     * double x, y, i1e();
     *
     * y = i1e( x );
     *
     *
     *
     * DESCRIPTION:
     *
     * Returns exponentially scaled modified Bessel function
     * of order one of the argument.
     *
     * The function is defined as i1(x) = -i exp(-|x|) j1( ix ).
     *
     *
     *
     * ACCURACY:
     *
     *                      Relative error:
     * arithmetic   domain     # trials      peak         rms
     *    IEEE      0, 30       30000       2.0e-15     2.0e-16
     * See i1().
     *
     */

    /// Returns the exponentially scaled modified Bessel function of order one I1(x)
    /// - Parameter x: Argument
    ///
    /// ###Note###
    /// adapted from Cephes with kind permission
    internal static func besselI1e<FPT: SSFloatingPoint & Codable>(x: FPT) -> FPT {
        var y, z: FPT
        
        z = abs(x)
        
        if( z <= 8 ) {
            y = (z / 2) - 2
            z = Helper.chebyshevEval(x: y, array: besselAJ(), n: 50 ) * z
        }
        else {
            z = Helper.chebyshevEval( x: 32 / z - 2,array: besselBJ(), n: 50 ) / sqrt(z)
        }
        if( x < 0 ) {
            z = -z
        }
        return z
    }

    /*                            iv.c
     *
     *    Modified Bessel function of noninteger order
     *
     *
     *
     * SYNOPSIS:
     *
     * double v, x, y, iv();
     *
     * y = iv( v, x );
     *
     *
     *
     * DESCRIPTION:
     *
     * Returns modified Bessel function of order v of the
     * argument.  If x is negative, v must be integer valued.
     *
     * The function is defined as Iv(x) = Jv( ix ).  It is
     * here computed in terms of the confluent hypergeometric
     * function, according to the formula
     *
     *              v  -x
     * Iv(x) = (x/2)  e   hyperg( v+0.5, 2v+1, 2x ) / gamma(v+1)
     *
     * If v is a negative integer, then v is replaced by -v.
     *
     *
     * ACCURACY:
     *
     * Tested at random points (v, x), with v between 0 and
     * 30, x between 0 and 28.
     *                      Relative error:
     * arithmetic   domain     # trials      peak         rms
     *    DEC       0,30          2000      3.1e-15     5.4e-16
     *    IEEE      0,30         10000      1.7e-14     2.7e-15
     *
     *
     * See also hyperg.c.
     *
     Cephes Math Library Release 2.8:  June, 2000
     Copyright 1984, 1987, 1988, 2000 by Stephen L. Moshier
     */

    
    /// Returns the modified Bessel function of non-integer order I(v, x)
    /// - Parameter x: Argument
    /// - Preconditon: if x < 0, v must be an integer
    /// ###NOTE###
    ///
    /// Accuracy is diminished if v is near a negative integer.
    internal static func besselI<FPT: SSFloatingPoint & Codable>(order v: FPT, x: FPT) -> FPT {
        var sign: FPT
        var t, ax: FPT
        var vv: FPT = v
        /* If v is a negative integer, invoke symmetry */
        t = floor(v)
        if( vv < 0 ) {
            if( t == vv ) {
                vv = -vv    /* symmetry */
                t = -t
            }
        }
        /* If x is negative, require v to be an integer */
        sign = 1
        if( x < 0 ) {
            if( t != vv ) {
                #if os(macOS) || os(iOS)
                if #available(macOS 10.12, iOS 13, *) {
                    os_log("BesselI: for x < 0, order must be an integer", log: .log_stat, type: .error)
                }
                #endif
                printError("BesselI: for x < 0, order must be an integer in the real plane")
                return 0
            }
            if( vv != 2 * floor(vv / 2) ) {
                sign = -1
            }
        }
        
        /* Avoid logarithm singularity */
        if( x == 0 ) {
            if( vv == 0 ) {
                return( 1 )
            }
            if( vv < 0 ) {
                #if os(macOS) || os(iOS)
                if #available(macOS 10.12, iOS 13, *) {
                    os_log("BesselI: overflow", log: .log_stat, type: .error)
                }
                #endif
                printError("BesselI: overflow")
                return FPT.infinity
            }
            else {
                return 0
            }
        }
        
        ax = abs(x)
        t = vv * SSMath.log1( FPT.half * ax )  -  x
        t = sign * SSMath.exp1(t) / SSMath.tgamma1( vv + 1 )
        ax = vv + FPT.half
        return t * hypergeometric1F1(a: ax, b: 2 * ax, x: 2 * x)
    }
    
}

/* Chebyshev coefficients for exp(-x) I0(x)
 * in the interval [0,8].
 *
 * lim(x->0){ exp(-x) I0(x) } = 1.
 */
fileprivate func besselAI0<FPT:  SSFloatingPoint & Codable>() -> [FPT] {
    let AI0Float: Array<Float> =
        [
            0.6767952744094760849952084881683910535897392707346183571934311043,-0.3046826723431983986825339182518464965134435122990618760037572348,0.1716209015222087753485835737755680776868622876553655323267683615,-0.09490109704804764442095730663485937438023650646502690832713624004,0.04930528423967070848777615794605307750830386731541098303582515117,-0.02373741480589946881556676634344807345704376179841689985342455435,0.01054646039459499831832250091128771148939978866459834740359490869,-0.00432430999505057594430499578753086899875885268954819060023788819,0.001639475616941335798418549814060924395609611164519648982735082426,-0.0005763755745385823658849378202604269935992204735049918585954150011,0.0001885028850958416557285147292165705095100732224157655269525521501,-0.00005754195010082103703976440562802510201842624876830946769311056167,0.00001644844807072889708931643359042528415792713047610114508729199746,-4.416738358458750563591215026355291922274809131673621896810370102e-6,1.117387539120103718152562646025675342753850274741581214593963691e-6,-2.670793853940611733914477441317822991237372013640008917431188304e-7,6.046995022541918949318740028757450255129193360431502543607821217e-8,-1.300025009986248042121747516731018532628140267152663827056300288e-8,2.659823724682386650347451528046225954844502596254268449163222727e-9,-5.189795601635262906655544022460986104251136091553205957002864601e-10,9.675809035373236912244047628139894301509041484127046812399541397e-11,-1.726826291441555707231872051712301533339542996181747071674773871e-11,2.9550526631296398346084060085292344836819351229470505640012252e-12,-4.856446783111929460897961860010054295850466221687054697364008938e-13,7.676185498604935616880994823349052483260773127486244169974967279e-14,-1.168533287799345168080359196048879689419370518227275986717283156e-14,1.715391285555133030606018151675785189283138834425715427805740808e-15,-2.431279846547954693594594118692584868622340018595427657440424606e-16,3.330794518822238097829387647239258124754271688526301667647911884e-17,-4.415341646479339379496802741262649738870433980439973298185638758e-18,5.669178006921496157085681814598121100367998656673806069259516937e-19,-7.057100692457293367118071496685731079534524186523683553639152672e-20,8.524549418128700814067355545593299956965822534265589015292324362e-21,-1.000052890233411553628354632458321513126171689687699518256516193e-21,1.140326139699785946971274892384041120874288704943839619109418298e-22,-1.264794549779463323332414340398084019602119603862712568066607152e-23,1.365555235957076599599454471454947860379678512698639137884541007e-24,-1.436134349984354100842593664337704066477143195912790899249390691e-25,1.472180747922900517316770594742821670619231539050179248202043494e-26,-1.471898370366115794034302598920785965050796075898849498006968347e-27,1.436160594479463908061444329636371018976851938913826754871009709e-28,-1.36830486933250411686393320267834811352714686628383837283164688e-29,1.273657618092320266154935172512614194696784266334673930779840089e-30,-1.158877499819262912176685095890357880447375536621456607775946923e-31,1.031223575229354764466772598580683892421324623608706920610215805e-32,-8.978526366387181384421537986528894091319108601538784764441123696e-34,7.652304004533644723543776764776608496119590652377957020894206858e-35,-6.387107568964847491477464345361586912663134890816197971213433744e-36,5.222855149143814737743998835487484587112177365816146077829584365e-37,-4.160902789534191901157352535603003991628565301840394005185652677e-38
    ]
    let AI0Double: Array<Double> =
        [
            0.6767952744094760849952084881683910535897392707346183571934311043,-0.3046826723431983986825339182518464965134435122990618760037572348,0.1716209015222087753485835737755680776868622876553655323267683615,-0.09490109704804764442095730663485937438023650646502690832713624004,0.04930528423967070848777615794605307750830386731541098303582515117,-0.02373741480589946881556676634344807345704376179841689985342455435,0.01054646039459499831832250091128771148939978866459834740359490869,-0.00432430999505057594430499578753086899875885268954819060023788819,0.001639475616941335798418549814060924395609611164519648982735082426,-0.0005763755745385823658849378202604269935992204735049918585954150011,0.0001885028850958416557285147292165705095100732224157655269525521501,-0.00005754195010082103703976440562802510201842624876830946769311056167,0.00001644844807072889708931643359042528415792713047610114508729199746,-4.416738358458750563591215026355291922274809131673621896810370102e-6,1.117387539120103718152562646025675342753850274741581214593963691e-6,-2.670793853940611733914477441317822991237372013640008917431188304e-7,6.046995022541918949318740028757450255129193360431502543607821217e-8,-1.300025009986248042121747516731018532628140267152663827056300288e-8,2.659823724682386650347451528046225954844502596254268449163222727e-9,-5.189795601635262906655544022460986104251136091553205957002864601e-10,9.675809035373236912244047628139894301509041484127046812399541397e-11,-1.726826291441555707231872051712301533339542996181747071674773871e-11,2.9550526631296398346084060085292344836819351229470505640012252e-12,-4.856446783111929460897961860010054295850466221687054697364008938e-13,7.676185498604935616880994823349052483260773127486244169974967279e-14,-1.168533287799345168080359196048879689419370518227275986717283156e-14,1.715391285555133030606018151675785189283138834425715427805740808e-15,-2.431279846547954693594594118692584868622340018595427657440424606e-16,3.330794518822238097829387647239258124754271688526301667647911884e-17,-4.415341646479339379496802741262649738870433980439973298185638758e-18,5.669178006921496157085681814598121100367998656673806069259516937e-19,-7.057100692457293367118071496685731079534524186523683553639152672e-20,8.524549418128700814067355545593299956965822534265589015292324362e-21,-1.000052890233411553628354632458321513126171689687699518256516193e-21,1.140326139699785946971274892384041120874288704943839619109418298e-22,-1.264794549779463323332414340398084019602119603862712568066607152e-23,1.365555235957076599599454471454947860379678512698639137884541007e-24,-1.436134349984354100842593664337704066477143195912790899249390691e-25,1.472180747922900517316770594742821670619231539050179248202043494e-26,-1.471898370366115794034302598920785965050796075898849498006968347e-27,1.436160594479463908061444329636371018976851938913826754871009709e-28,-1.36830486933250411686393320267834811352714686628383837283164688e-29,1.273657618092320266154935172512614194696784266334673930779840089e-30,-1.158877499819262912176685095890357880447375536621456607775946923e-31,1.031223575229354764466772598580683892421324623608706920610215805e-32,-8.978526366387181384421537986528894091319108601538784764441123696e-34,7.652304004533644723543776764776608496119590652377957020894206858e-35,-6.387107568964847491477464345361586912663134890816197971213433744e-36,5.222855149143814737743998835487484587112177365816146077829584365e-37,-4.160902789534191901157352535603003991628565301840394005185652677e-38
            
    ]
    #if arch(i386) || arch(x86_64)
    let AI0Float80: Array<Float80> = [
        0.6767952744094760849952084881683910535897392707346183571934311043,-0.3046826723431983986825339182518464965134435122990618760037572348,0.1716209015222087753485835737755680776868622876553655323267683615,-0.09490109704804764442095730663485937438023650646502690832713624004,0.04930528423967070848777615794605307750830386731541098303582515117,-0.02373741480589946881556676634344807345704376179841689985342455435,0.01054646039459499831832250091128771148939978866459834740359490869,-0.00432430999505057594430499578753086899875885268954819060023788819,0.001639475616941335798418549814060924395609611164519648982735082426,-0.0005763755745385823658849378202604269935992204735049918585954150011,0.0001885028850958416557285147292165705095100732224157655269525521501,-0.00005754195010082103703976440562802510201842624876830946769311056167,0.00001644844807072889708931643359042528415792713047610114508729199746,-4.416738358458750563591215026355291922274809131673621896810370102e-6,1.117387539120103718152562646025675342753850274741581214593963691e-6,-2.670793853940611733914477441317822991237372013640008917431188304e-7,6.046995022541918949318740028757450255129193360431502543607821217e-8,-1.300025009986248042121747516731018532628140267152663827056300288e-8,2.659823724682386650347451528046225954844502596254268449163222727e-9,-5.189795601635262906655544022460986104251136091553205957002864601e-10,9.675809035373236912244047628139894301509041484127046812399541397e-11,-1.726826291441555707231872051712301533339542996181747071674773871e-11,2.9550526631296398346084060085292344836819351229470505640012252e-12,-4.856446783111929460897961860010054295850466221687054697364008938e-13,7.676185498604935616880994823349052483260773127486244169974967279e-14,-1.168533287799345168080359196048879689419370518227275986717283156e-14,1.715391285555133030606018151675785189283138834425715427805740808e-15,-2.431279846547954693594594118692584868622340018595427657440424606e-16,3.330794518822238097829387647239258124754271688526301667647911884e-17,-4.415341646479339379496802741262649738870433980439973298185638758e-18,5.669178006921496157085681814598121100367998656673806069259516937e-19,-7.057100692457293367118071496685731079534524186523683553639152672e-20,8.524549418128700814067355545593299956965822534265589015292324362e-21,-1.000052890233411553628354632458321513126171689687699518256516193e-21,1.140326139699785946971274892384041120874288704943839619109418298e-22,-1.264794549779463323332414340398084019602119603862712568066607152e-23,1.365555235957076599599454471454947860379678512698639137884541007e-24,-1.436134349984354100842593664337704066477143195912790899249390691e-25,1.472180747922900517316770594742821670619231539050179248202043494e-26,-1.471898370366115794034302598920785965050796075898849498006968347e-27,1.436160594479463908061444329636371018976851938913826754871009709e-28,-1.36830486933250411686393320267834811352714686628383837283164688e-29,1.273657618092320266154935172512614194696784266334673930779840089e-30,-1.158877499819262912176685095890357880447375536621456607775946923e-31,1.031223575229354764466772598580683892421324623608706920610215805e-32,-8.978526366387181384421537986528894091319108601538784764441123696e-34,7.652304004533644723543776764776608496119590652377957020894206858e-35,-6.387107568964847491477464345361586912663134890816197971213433744e-36,5.222855149143814737743998835487484587112177365816146077829584365e-37,-4.160902789534191901157352535603003991628565301840394005185652677e-38
    ]
    #endif
    switch FPT.self {
    case is Float.Type:
        let result = AI0Float.reversed() as Array<Float>
        return result.map { Helpers.makeFP($0) }
    case is Double.Type:
        let result = AI0Double.reversed() as Array<Double>
        return result.map { Helpers.makeFP($0) }
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = AI0Float80.reversed() as Array<Float80>
        return result.map { Helpers.makeFP($0) }
        #endif
    default:
        let result = AI0Double.reversed() as Array<Double>
        return result.map { Helpers.makeFP($0) }
    }
}

/* Chebyshev coefficients for exp(-x) sqrt(x) I0(x)
 * in the inverted interval [8,infinity].
 *
 * lim(x->inf){ exp(-x) sqrt(x) I0(x) } = 1/sqrt(2pi).
 */

fileprivate func besselBI0<FPT:  SSFloatingPoint & Codable>() -> [FPT] {
    let BI0Float: Array<Float> = [
        0.8044904110141088316078960962268008938727593772363166205147250201,0.00336911647825569408989785662979996837292799003190508919724190835,0.00006889758346916823984262639143011097098812172091957367532880184527,2.89137052083475648296692402323294879235248439834576017095718604e-6,2.04891858946906374182760534093132922132731364835104563481255122e-7,2.266668990498178064593277431360492930615076082033358787973897409e-8,3.396232025708386345150843969539693060063582330079523871837731726e-9,4.94060238822496958910482449782420058366953836492255615355734204e-10,1.188914710784643834240845247237894898574138626113895083558921475e-11,-3.149916527963241364538648619822224244845068666794912749277760652e-11,-1.321581184044771311875407404060406310885703000176153447338686312e-11,-1.794178531506806117779435951554997344176607306307903421162899653e-12,7.180124451383666233671069975195031316952515924152165977890404244e-13,3.85277838274214270114089349333280965646364627300270634049054269e-13,1.540086217521409826913167030221790878241079531054422511880189344e-14,-4.150569347287222086626577465607485143232195112137488025901775575e-14,-9.55484669882830764870550796210938862676775099546928619252978694e-15,3.811680669352622420742232458956837000954879462763965409939299199e-15,1.772560133056526383623175953910562118652185369047839803626341706e-15,-3.42548561967721913484654696877650572410241052925312889057472213e-16,-2.827623980516583485100736640446224954775311462506866945893125941e-16,3.461222867697461103570994571862848878263749189475847468618107324e-17,4.465621420296759984325712213010244064667876245338756341045532839e-17,-4.830504485944182139995050841343380682722513110421458424053974367e-18,-7.233180487874753336634718013324123459120913832860874877518195754e-18,9.921475412173689318547027408617449349632248315838276081497477523e-19,1.193650890845981737828026801674959115996458990453253300933547343e-18,-2.488709837150769406547136994582821604200673826938657045168050998e-19,-1.938426454160963884487257252164464347456537739418002955229006761e-19,6.444656697373213007673458523491489648704477417916561083186270732e-20,2.886051596291639265922851552027667218984712295133061482622014242e-20,-1.601954907178549809482266808653518610445952484747460929864088285e-20,-3.270815010611968250733038284320039798815189669050511251825834155e-21,3.686932283986954593511277721757802845535021107989949219882856382e-21,1.268297626428981425609540667750288571483847695691735115006517606e-23,-7.549825021263561024100913760825896293081654055984475546482730097e-22,1.502133582400426554511242700342899416027885675230770594757978365e-22,1.265195871133797112223173742903989476023810914914639988846463773e-22,-6.100998555908963318147503533153858427707807540222774740963093439e-23,-1.268808860041198989733791593078325306380291134389014352825625058e-23,1.661015478581407330995670729839968132158978943154327766935550694e-23,-1.58521236883218430825444537029236424542455945900876656579002953e-24,-3.302592230987403175823410283196981487425619264475157439682429112e-24,1.31356107417385220444922379688865618360415136558872631904523615e-24,3.687349343060894445199707237224737452004808388795359675880383263e-25,-4.206658571080872912325262215799669742607641275775193856635568488e-25,4.801543311598601583333428276602797370391439774144619229127816882e-26,8.309118352739608805233354967489583006869624673348073723496828036e-26,-3.843669809953337196624569798980706788385005082217445471300427088e-26,-3.500323337624816742959393807037149379099478667273022598866250469e-27
    ]
    let BI0Double: Array<Double> = [
        0.8044904110141088316078960962268008938727593772363166205147250201,0.00336911647825569408989785662979996837292799003190508919724190835,0.00006889758346916823984262639143011097098812172091957367532880184527,2.89137052083475648296692402323294879235248439834576017095718604e-6,2.04891858946906374182760534093132922132731364835104563481255122e-7,2.266668990498178064593277431360492930615076082033358787973897409e-8,3.396232025708386345150843969539693060063582330079523871837731726e-9,4.94060238822496958910482449782420058366953836492255615355734204e-10,1.188914710784643834240845247237894898574138626113895083558921475e-11,-3.149916527963241364538648619822224244845068666794912749277760652e-11,-1.321581184044771311875407404060406310885703000176153447338686312e-11,-1.794178531506806117779435951554997344176607306307903421162899653e-12,7.180124451383666233671069975195031316952515924152165977890404244e-13,3.85277838274214270114089349333280965646364627300270634049054269e-13,1.540086217521409826913167030221790878241079531054422511880189344e-14,-4.150569347287222086626577465607485143232195112137488025901775575e-14,-9.55484669882830764870550796210938862676775099546928619252978694e-15,3.811680669352622420742232458956837000954879462763965409939299199e-15,1.772560133056526383623175953910562118652185369047839803626341706e-15,-3.42548561967721913484654696877650572410241052925312889057472213e-16,-2.827623980516583485100736640446224954775311462506866945893125941e-16,3.461222867697461103570994571862848878263749189475847468618107324e-17,4.465621420296759984325712213010244064667876245338756341045532839e-17,-4.830504485944182139995050841343380682722513110421458424053974367e-18,-7.233180487874753336634718013324123459120913832860874877518195754e-18,9.921475412173689318547027408617449349632248315838276081497477523e-19,1.193650890845981737828026801674959115996458990453253300933547343e-18,-2.488709837150769406547136994582821604200673826938657045168050998e-19,-1.938426454160963884487257252164464347456537739418002955229006761e-19,6.444656697373213007673458523491489648704477417916561083186270732e-20,2.886051596291639265922851552027667218984712295133061482622014242e-20,-1.601954907178549809482266808653518610445952484747460929864088285e-20,-3.270815010611968250733038284320039798815189669050511251825834155e-21,3.686932283986954593511277721757802845535021107989949219882856382e-21,1.268297626428981425609540667750288571483847695691735115006517606e-23,-7.549825021263561024100913760825896293081654055984475546482730097e-22,1.502133582400426554511242700342899416027885675230770594757978365e-22,1.265195871133797112223173742903989476023810914914639988846463773e-22,-6.100998555908963318147503533153858427707807540222774740963093439e-23,-1.268808860041198989733791593078325306380291134389014352825625058e-23,1.661015478581407330995670729839968132158978943154327766935550694e-23,-1.58521236883218430825444537029236424542455945900876656579002953e-24,-3.302592230987403175823410283196981487425619264475157439682429112e-24,1.31356107417385220444922379688865618360415136558872631904523615e-24,3.687349343060894445199707237224737452004808388795359675880383263e-25,-4.206658571080872912325262215799669742607641275775193856635568488e-25,4.801543311598601583333428276602797370391439774144619229127816882e-26,8.309118352739608805233354967489583006869624673348073723496828036e-26,-3.843669809953337196624569798980706788385005082217445471300427088e-26,-3.500323337624816742959393807037149379099478667273022598866250469e-27
    ]
    #if arch(i386) || arch(x86_64)
    let BI0Float80: Array<Float80> = [
        0.8044904110141088316078960962268008938727593772363166205147250201,0.00336911647825569408989785662979996837292799003190508919724190835,0.00006889758346916823984262639143011097098812172091957367532880184527,2.89137052083475648296692402323294879235248439834576017095718604e-6,2.04891858946906374182760534093132922132731364835104563481255122e-7,2.266668990498178064593277431360492930615076082033358787973897409e-8,3.396232025708386345150843969539693060063582330079523871837731726e-9,4.94060238822496958910482449782420058366953836492255615355734204e-10,1.188914710784643834240845247237894898574138626113895083558921475e-11,-3.149916527963241364538648619822224244845068666794912749277760652e-11,-1.321581184044771311875407404060406310885703000176153447338686312e-11,-1.794178531506806117779435951554997344176607306307903421162899653e-12,7.180124451383666233671069975195031316952515924152165977890404244e-13,3.85277838274214270114089349333280965646364627300270634049054269e-13,1.540086217521409826913167030221790878241079531054422511880189344e-14,-4.150569347287222086626577465607485143232195112137488025901775575e-14,-9.55484669882830764870550796210938862676775099546928619252978694e-15,3.811680669352622420742232458956837000954879462763965409939299199e-15,1.772560133056526383623175953910562118652185369047839803626341706e-15,-3.42548561967721913484654696877650572410241052925312889057472213e-16,-2.827623980516583485100736640446224954775311462506866945893125941e-16,3.461222867697461103570994571862848878263749189475847468618107324e-17,4.465621420296759984325712213010244064667876245338756341045532839e-17,-4.830504485944182139995050841343380682722513110421458424053974367e-18,-7.233180487874753336634718013324123459120913832860874877518195754e-18,9.921475412173689318547027408617449349632248315838276081497477523e-19,1.193650890845981737828026801674959115996458990453253300933547343e-18,-2.488709837150769406547136994582821604200673826938657045168050998e-19,-1.938426454160963884487257252164464347456537739418002955229006761e-19,6.444656697373213007673458523491489648704477417916561083186270732e-20,2.886051596291639265922851552027667218984712295133061482622014242e-20,-1.601954907178549809482266808653518610445952484747460929864088285e-20,-3.270815010611968250733038284320039798815189669050511251825834155e-21,3.686932283986954593511277721757802845535021107989949219882856382e-21,1.268297626428981425609540667750288571483847695691735115006517606e-23,-7.549825021263561024100913760825896293081654055984475546482730097e-22,1.502133582400426554511242700342899416027885675230770594757978365e-22,1.265195871133797112223173742903989476023810914914639988846463773e-22,-6.100998555908963318147503533153858427707807540222774740963093439e-23,-1.268808860041198989733791593078325306380291134389014352825625058e-23,1.661015478581407330995670729839968132158978943154327766935550694e-23,-1.58521236883218430825444537029236424542455945900876656579002953e-24,-3.302592230987403175823410283196981487425619264475157439682429112e-24,1.31356107417385220444922379688865618360415136558872631904523615e-24,3.687349343060894445199707237224737452004808388795359675880383263e-25,-4.206658571080872912325262215799669742607641275775193856635568488e-25,4.801543311598601583333428276602797370391439774144619229127816882e-26,8.309118352739608805233354967489583006869624673348073723496828036e-26,-3.843669809953337196624569798980706788385005082217445471300427088e-26,-3.500323337624816742959393807037149379099478667273022598866250469e-27
    ]
    #endif
    switch FPT.self {
    case is Float.Type:
        let result = BI0Float.reversed() as Array<Float>
        return result.map { Helpers.makeFP($0) }
    case is Double.Type:
        let result = BI0Double.reversed() as Array<Double>
        return result.map { Helpers.makeFP($0) }
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = BI0Float80.reversed() as Array<Float80>
        return result.map { Helpers.makeFP($0) }
        #endif
    default:
        return BI0Double.map { Helpers.makeFP($0) }
    }
}


/*                            i1.c 2        */


/*
 Cephes Math Library Release 2.8:  June, 2000
 Copyright 1985, 1987, 2000 by Stephen L. Moshier
 */
/* Chebyshev coefficients for exp(-x) I1(x) / x
 * in the interval [0,8].
 *
 * lim(x->0){ exp(-x) I1(x) / x } = 1/2.
 */

fileprivate func besselAJ<FPT: SSFloatingPoint & Codable>() -> [FPT]  {
    let AJDouble: Array<Double> = [0.2525871864436336548233124571964114879514384915396264124333313714,-0.1764165183578340551526789776334498638230776134648609434323920627,0.1026436586898470953840931999994291327628243982948431799842646046,-0.05294598120809499142691944087293501726892704044015542196665059185,0.02472644903062651682828990259609131706630970457955008717677474633,-0.01056408489462619815575811076538720173415005635548185121753177124,0.004156422944312888156689651983986074646562935143390059687057655075,-0.001513572450631253148987310236797123617580838645220559986550837658,0.0005122859561685757728954354499381958282140407165643382360138492119,-0.0001617608158258967455879106177258168965193640451604239754577683109,0.00004781565107550054226378210135683341580057972225208907022258812279,-0.00001327316365603943582791098647061500020543956226177170101989686511,3.470251308137678476736071702566707601405807095961065207878164815e-6,-8.568720264695454740655907532870622464170767051491202049244267168e-7,2.003294753552135262286044517365924568290795288583962289173494072e-7,-4.445059128796328080653860549987557647961755030687383369054834496e-8,9.381537386495771783881787014225373467948789835848716865160790132e-9,-1.88724975172282928790400621719487808207989255765493136229660782e-9,3.625590281552117037007865031691067275643782889354492528109980005e-10,-6.663489723502027742230939645889366037648136308946430941349317499e-11,1.173618629889090163082187907743118566985029475923357559141677842e-11,-1.983974397764943715199084224972104686253016521226168800698347468e-12,3.223793365945574709813381587566986543286111893721934572006362421e-13,-5.04218550472791168710670430837101108162285093615326621323562098e-14,7.60068429473540693407383230461181063126722911990783578371510546e-15,-1.105596947735386308025532710021758168974219087635168030719050352e-15,1.553631957736200468917456286371163838826796684401737292250237817e-16,-2.111421214358166078238501961311155441104928961095190790051541529e-17,2.777914112761046370485212211682875466222690298860262070572987648e-18,-3.541581772542136205229846550926698390236775708247344754788179618e-19,4.379302756655070994572797832846456751121010209666291529885165501e-20,-5.256729982574641246885417714906575568641359335005590575917662539e-21,6.130328040295170315633891266543280741630786315676580455231044673e-22,-6.950970074145619025534865301460652557184124629120534122789613143e-23,7.668675024494378705176007133724410400286292459697597713341766297e-24,-8.23782218311733420179786261663679339894467759149564264390689963e-25,8.622060621852316498297914917774975682608783847802121226247400877e-26,-8.798166212197432140359644155173076101084893688556064024604308935e-27,8.758280797162443220056743820980593188885106339891114272666004912e-28,-8.510253751583279158355524402150841259103434644092230488803870552e-29,8.076130519064285446295659673985570164576203413662189411289538106e-30,-7.489126239724665871996534760266281315952446793185400559492320289e-31,6.789628945514038408040015999147898449417476723943474486247162951e-32,-6.020864959864746458480589264185791376249129847355153454763941323e-33,5.224827412763474452077390408339756512824185431766034161419350356e-34,-4.438940904333856307919815503127656876976789788052477090137375923e-35,3.693750899256061609388943388259399397155298234771291620908531451e-36,-3.011728632445407614973293106136405970437366390839196938490987265e-37,2.407033419012446230530593191058517159761109540355021563403549981e-38,-1.875639859679627554531931988736318660395382864050734398138755647e-39]
    let AJFloat: Array<Float> = [0.2525871864436336548233124571964114879514384915396264124333313714,-0.1764165183578340551526789776334498638230776134648609434323920627,0.1026436586898470953840931999994291327628243982948431799842646046,-0.05294598120809499142691944087293501726892704044015542196665059185,0.02472644903062651682828990259609131706630970457955008717677474633,-0.01056408489462619815575811076538720173415005635548185121753177124,0.004156422944312888156689651983986074646562935143390059687057655075,-0.001513572450631253148987310236797123617580838645220559986550837658,0.0005122859561685757728954354499381958282140407165643382360138492119,-0.0001617608158258967455879106177258168965193640451604239754577683109,0.00004781565107550054226378210135683341580057972225208907022258812279,-0.00001327316365603943582791098647061500020543956226177170101989686511,3.470251308137678476736071702566707601405807095961065207878164815e-6,-8.568720264695454740655907532870622464170767051491202049244267168e-7,2.003294753552135262286044517365924568290795288583962289173494072e-7,-4.445059128796328080653860549987557647961755030687383369054834496e-8,9.381537386495771783881787014225373467948789835848716865160790132e-9,-1.88724975172282928790400621719487808207989255765493136229660782e-9,3.625590281552117037007865031691067275643782889354492528109980005e-10,-6.663489723502027742230939645889366037648136308946430941349317499e-11,1.173618629889090163082187907743118566985029475923357559141677842e-11,-1.983974397764943715199084224972104686253016521226168800698347468e-12,3.223793365945574709813381587566986543286111893721934572006362421e-13,-5.04218550472791168710670430837101108162285093615326621323562098e-14,7.60068429473540693407383230461181063126722911990783578371510546e-15,-1.105596947735386308025532710021758168974219087635168030719050352e-15,1.553631957736200468917456286371163838826796684401737292250237817e-16,-2.111421214358166078238501961311155441104928961095190790051541529e-17,2.777914112761046370485212211682875466222690298860262070572987648e-18,-3.541581772542136205229846550926698390236775708247344754788179618e-19,4.379302756655070994572797832846456751121010209666291529885165501e-20,-5.256729982574641246885417714906575568641359335005590575917662539e-21,6.130328040295170315633891266543280741630786315676580455231044673e-22,-6.950970074145619025534865301460652557184124629120534122789613143e-23,7.668675024494378705176007133724410400286292459697597713341766297e-24,-8.23782218311733420179786261663679339894467759149564264390689963e-25,8.622060621852316498297914917774975682608783847802121226247400877e-26,-8.798166212197432140359644155173076101084893688556064024604308935e-27,8.758280797162443220056743820980593188885106339891114272666004912e-28,-8.510253751583279158355524402150841259103434644092230488803870552e-29,8.076130519064285446295659673985570164576203413662189411289538106e-30,-7.489126239724665871996534760266281315952446793185400559492320289e-31,6.789628945514038408040015999147898449417476723943474486247162951e-32,-6.020864959864746458480589264185791376249129847355153454763941323e-33,5.224827412763474452077390408339756512824185431766034161419350356e-34, -4.438940904333856307919815503127656876976789788052477090137375923e-35, 3.693750899256061609388943388259399397155298234771291620908531451e-36, -3.011728632445407614973293106136405970437366390839196938490987265e-37, 2.407033419012446230530593191058517159761109540355021563403549981e-38,
                                 0.0]
    #if arch(i386) || arch(x86_64)
    let AJFloat80: Array<Float80> = [0.2525871864436336548233124571964114879514384915396264124333313714,-0.1764165183578340551526789776334498638230776134648609434323920627,0.1026436586898470953840931999994291327628243982948431799842646046,-0.05294598120809499142691944087293501726892704044015542196665059185,0.02472644903062651682828990259609131706630970457955008717677474633,-0.01056408489462619815575811076538720173415005635548185121753177124,0.004156422944312888156689651983986074646562935143390059687057655075,-0.001513572450631253148987310236797123617580838645220559986550837658,0.0005122859561685757728954354499381958282140407165643382360138492119,-0.0001617608158258967455879106177258168965193640451604239754577683109,0.00004781565107550054226378210135683341580057972225208907022258812279,-0.00001327316365603943582791098647061500020543956226177170101989686511,3.470251308137678476736071702566707601405807095961065207878164815e-6,-8.568720264695454740655907532870622464170767051491202049244267168e-7,2.003294753552135262286044517365924568290795288583962289173494072e-7,-4.445059128796328080653860549987557647961755030687383369054834496e-8,9.381537386495771783881787014225373467948789835848716865160790132e-9,-1.88724975172282928790400621719487808207989255765493136229660782e-9,3.625590281552117037007865031691067275643782889354492528109980005e-10,-6.663489723502027742230939645889366037648136308946430941349317499e-11,1.173618629889090163082187907743118566985029475923357559141677842e-11,-1.983974397764943715199084224972104686253016521226168800698347468e-12,3.223793365945574709813381587566986543286111893721934572006362421e-13,-5.04218550472791168710670430837101108162285093615326621323562098e-14,7.60068429473540693407383230461181063126722911990783578371510546e-15,-1.105596947735386308025532710021758168974219087635168030719050352e-15,1.553631957736200468917456286371163838826796684401737292250237817e-16,-2.111421214358166078238501961311155441104928961095190790051541529e-17,2.777914112761046370485212211682875466222690298860262070572987648e-18,-3.541581772542136205229846550926698390236775708247344754788179618e-19,4.379302756655070994572797832846456751121010209666291529885165501e-20,-5.256729982574641246885417714906575568641359335005590575917662539e-21,6.130328040295170315633891266543280741630786315676580455231044673e-22,-6.950970074145619025534865301460652557184124629120534122789613143e-23,7.668675024494378705176007133724410400286292459697597713341766297e-24,-8.23782218311733420179786261663679339894467759149564264390689963e-25,8.622060621852316498297914917774975682608783847802121226247400877e-26,-8.798166212197432140359644155173076101084893688556064024604308935e-27,8.758280797162443220056743820980593188885106339891114272666004912e-28,-8.510253751583279158355524402150841259103434644092230488803870552e-29,8.076130519064285446295659673985570164576203413662189411289538106e-30,-7.489126239724665871996534760266281315952446793185400559492320289e-31,6.789628945514038408040015999147898449417476723943474486247162951e-32,-6.020864959864746458480589264185791376249129847355153454763941323e-33,5.224827412763474452077390408339756512824185431766034161419350356e-34,-4.438940904333856307919815503127656876976789788052477090137375923e-35,3.693750899256061609388943388259399397155298234771291620908531451e-36,-3.011728632445407614973293106136405970437366390839196938490987265e-37,2.407033419012446230530593191058517159761109540355021563403549981e-38,-1.875639859679627554531931988736318660395382864050734398138755647e-39]
    #endif
    switch FPT.self {
    case is Float.Type:
        let result = AJFloat.reversed() as Array<Float>
        return result.map { Helpers.makeFP($0) }
    case is Double.Type:
        let result = AJDouble.reversed() as Array<Double>
        return result.map { Helpers.makeFP($0) }
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = AJFloat80.reversed() as Array<Float80>
        return result.map { Helpers.makeFP($0) }
        #endif
    default:
        let result = AJDouble.reversed() as Array<Double>
        return result.map { Helpers.makeFP($0) }
    }
}
/*                            i1.c    */

/* Chebyshev coefficients for exp(-x) sqrt(x) I1(x)
 * in the inverted interval [8,infinity].
 *
 * lim(x->inf){ exp(-x) sqrt(x) I1(x) } = 1/sqrt(2pi).
 */


fileprivate func besselBJ<FPT: SSFloatingPoint & Codable>() -> [FPT] {
    let BJFloat: Array<Float> =  [
        0.7785762350182801204744984594846941344632714867882701107573000808,-0.009761097491361468407765164457302242593864822188369516595800106742,-0.0001105889387626237162912569212775990867240856380947469461590997111,-3.88256480887769039345654477627462110377599301660756463658616131e-6,-2.512236237870208925294520022121626597577153625966702116545267133e-7,-2.631468846889519506837052365231620425476654022474613629864646316e-8,-3.835380385964237022045006787984704674845924720233360665438794e-9,-5.589743462196583806868112522211226582051439055178098796581065548e-10,-1.89749581235054123449892502852449240564741554676369758330642437e-11,3.25260358301548823855508066998509110239721131870826692064972157e-11,1.412580743661378133163366337968945255080343827992747909120998164e-11,2.035628544147089507224526346775457828190060543777458505395982524e-12,-7.198551776245908512092595645783493423458170414305731472495802604e-13,-4.083551111092197318228494923036496427593277019296236061833164404e-13,-2.101541842772664313019755993990929896397465388404349251358996142e-14,4.272440016711951354297462668924849784360716141584597666891848422e-14,1.042027698412880276417762195888738207379457269804012617704725422e-14,-3.814403072437007804763360754445203114496897707826358963139002263e-15,-1.880354775510782448531134998335652781851302453736554625251006863e-15,3.308202310920928282965901436910439769162371643953218057533683595e-16,2.96262899764595013921949701172223503543857509250097474911397003e-16,-3.209525921993423969326666727128110268169107723884873438660815545e-17,-4.650305368489358310485683310043181893732932704111142882158463226e-17,4.414348323071708013550763972832990686858878003612602471829005135e-18,7.517296310842104183674161385342569376279894608750151280106764513e-18,-9.314178867326873848569122143326097113065711734076397759107549316e-19,-1.242193275194890641685555343355434547993437805574638891840426166e-18,2.414276719454810411719772035700392264855100992693413412352448347e-19,2.026944384053344708615149111621506997813467676712876830131737105e-19,-6.394267188268888059888974733309301413794301039603825778578002906e-20,-3.049812452375527162437301501852620393087346240530295647032236426e-20,1.612841851655162519382533133004515820973604463319236447040163923e-20,3.560913964328265853605784051491980978576977094923627550043547435e-21,-3.752017948098342039396239266638271021083861979895528452447231684e-21,-5.787037404758022168735656864385268276048341358318507915053386969e-23,7.759997513456505108608249787375772304001480198311197986601167526e-22,-1.452790908347715123209144296164028651706649091391778930110769286e-22,-1.31822527386198717542469102894201352988821107725784320742662028e-22,6.116655044562596770367168300417398239254807403252077487874810552e-23,1.376278981725809918732421395375212851737206876698904678964015762e-23,-1.690837033411440994758662138591032825969686421174764922650588559e-23,1.430613959279449087009171301156527735236276190817901621883974382e-24,3.409503582739322278520679145596995498269275284849663579704251421e-24,-1.309435437245763415043777007363834255631307591988951969662095091e-24,-3.939013482221328810521459439310499947536937984694238277775668581e-25,4.273557047626102227678108144969398663772430762918619587655957402e-25,-4.432745012080803185152130913560642739952809549904398510481728902e-26,-8.58224953284866246381297342360942745378251351317912853876116965e-26,3.840972046433101336487485172348316216062848402220689503004666538e-26,4.199708413691162263018269815695912197586577487632547662110465945e-27
    ]
    let BJDouble: Array<Double> =  [
        0.7785762350182801204744984594846941344632714867882701107573000808,-0.009761097491361468407765164457302242593864822188369516595800106742,-0.0001105889387626237162912569212775990867240856380947469461590997111,-3.88256480887769039345654477627462110377599301660756463658616131e-6,-2.512236237870208925294520022121626597577153625966702116545267133e-7,-2.631468846889519506837052365231620425476654022474613629864646316e-8,-3.835380385964237022045006787984704674845924720233360665438794e-9,-5.589743462196583806868112522211226582051439055178098796581065548e-10,-1.89749581235054123449892502852449240564741554676369758330642437e-11,3.25260358301548823855508066998509110239721131870826692064972157e-11,1.412580743661378133163366337968945255080343827992747909120998164e-11,2.035628544147089507224526346775457828190060543777458505395982524e-12,-7.198551776245908512092595645783493423458170414305731472495802604e-13,-4.083551111092197318228494923036496427593277019296236061833164404e-13,-2.101541842772664313019755993990929896397465388404349251358996142e-14,4.272440016711951354297462668924849784360716141584597666891848422e-14,1.042027698412880276417762195888738207379457269804012617704725422e-14,-3.814403072437007804763360754445203114496897707826358963139002263e-15,-1.880354775510782448531134998335652781851302453736554625251006863e-15,3.308202310920928282965901436910439769162371643953218057533683595e-16,2.96262899764595013921949701172223503543857509250097474911397003e-16,-3.209525921993423969326666727128110268169107723884873438660815545e-17,-4.650305368489358310485683310043181893732932704111142882158463226e-17,4.414348323071708013550763972832990686858878003612602471829005135e-18,7.517296310842104183674161385342569376279894608750151280106764513e-18,-9.314178867326873848569122143326097113065711734076397759107549316e-19,-1.242193275194890641685555343355434547993437805574638891840426166e-18,2.414276719454810411719772035700392264855100992693413412352448347e-19,2.026944384053344708615149111621506997813467676712876830131737105e-19,-6.394267188268888059888974733309301413794301039603825778578002906e-20,-3.049812452375527162437301501852620393087346240530295647032236426e-20,1.612841851655162519382533133004515820973604463319236447040163923e-20,3.560913964328265853605784051491980978576977094923627550043547435e-21,-3.752017948098342039396239266638271021083861979895528452447231684e-21,-5.787037404758022168735656864385268276048341358318507915053386969e-23,7.759997513456505108608249787375772304001480198311197986601167526e-22,-1.452790908347715123209144296164028651706649091391778930110769286e-22,-1.31822527386198717542469102894201352988821107725784320742662028e-22,6.116655044562596770367168300417398239254807403252077487874810552e-23,1.376278981725809918732421395375212851737206876698904678964015762e-23,-1.690837033411440994758662138591032825969686421174764922650588559e-23,1.430613959279449087009171301156527735236276190817901621883974382e-24,3.409503582739322278520679145596995498269275284849663579704251421e-24,-1.309435437245763415043777007363834255631307591988951969662095091e-24,-3.939013482221328810521459439310499947536937984694238277775668581e-25,4.273557047626102227678108144969398663772430762918619587655957402e-25,-4.432745012080803185152130913560642739952809549904398510481728902e-26,-8.58224953284866246381297342360942745378251351317912853876116965e-26,3.840972046433101336487485172348316216062848402220689503004666538e-26,4.199708413691162263018269815695912197586577487632547662110465945e-27
    ]
    #if arch(i386) || arch(x86_64)
    let BJFloat80: Array<Float80> =  [
        0.7785762350182801204744984594846941344632714867882701107573000808,-0.009761097491361468407765164457302242593864822188369516595800106742,-0.0001105889387626237162912569212775990867240856380947469461590997111,-3.88256480887769039345654477627462110377599301660756463658616131e-6,-2.512236237870208925294520022121626597577153625966702116545267133e-7,-2.631468846889519506837052365231620425476654022474613629864646316e-8,-3.835380385964237022045006787984704674845924720233360665438794e-9,-5.589743462196583806868112522211226582051439055178098796581065548e-10,-1.89749581235054123449892502852449240564741554676369758330642437e-11,3.25260358301548823855508066998509110239721131870826692064972157e-11,1.412580743661378133163366337968945255080343827992747909120998164e-11,2.035628544147089507224526346775457828190060543777458505395982524e-12,-7.198551776245908512092595645783493423458170414305731472495802604e-13,-4.083551111092197318228494923036496427593277019296236061833164404e-13,-2.101541842772664313019755993990929896397465388404349251358996142e-14,4.272440016711951354297462668924849784360716141584597666891848422e-14,1.042027698412880276417762195888738207379457269804012617704725422e-14,-3.814403072437007804763360754445203114496897707826358963139002263e-15,-1.880354775510782448531134998335652781851302453736554625251006863e-15,3.308202310920928282965901436910439769162371643953218057533683595e-16,2.96262899764595013921949701172223503543857509250097474911397003e-16,-3.209525921993423969326666727128110268169107723884873438660815545e-17,-4.650305368489358310485683310043181893732932704111142882158463226e-17,4.414348323071708013550763972832990686858878003612602471829005135e-18,7.517296310842104183674161385342569376279894608750151280106764513e-18,-9.314178867326873848569122143326097113065711734076397759107549316e-19,-1.242193275194890641685555343355434547993437805574638891840426166e-18,2.414276719454810411719772035700392264855100992693413412352448347e-19,2.026944384053344708615149111621506997813467676712876830131737105e-19,-6.394267188268888059888974733309301413794301039603825778578002906e-20,-3.049812452375527162437301501852620393087346240530295647032236426e-20,1.612841851655162519382533133004515820973604463319236447040163923e-20,3.560913964328265853605784051491980978576977094923627550043547435e-21,-3.752017948098342039396239266638271021083861979895528452447231684e-21,-5.787037404758022168735656864385268276048341358318507915053386969e-23,7.759997513456505108608249787375772304001480198311197986601167526e-22,-1.452790908347715123209144296164028651706649091391778930110769286e-22,-1.31822527386198717542469102894201352988821107725784320742662028e-22,6.116655044562596770367168300417398239254807403252077487874810552e-23,1.376278981725809918732421395375212851737206876698904678964015762e-23,-1.690837033411440994758662138591032825969686421174764922650588559e-23,1.430613959279449087009171301156527735236276190817901621883974382e-24,3.409503582739322278520679145596995498269275284849663579704251421e-24,-1.309435437245763415043777007363834255631307591988951969662095091e-24,-3.939013482221328810521459439310499947536937984694238277775668581e-25,4.273557047626102227678108144969398663772430762918619587655957402e-25,-4.432745012080803185152130913560642739952809549904398510481728902e-26,-8.58224953284866246381297342360942745378251351317912853876116965e-26,3.840972046433101336487485172348316216062848402220689503004666538e-26,4.199708413691162263018269815695912197586577487632547662110465945e-27
    ]
    #endif
    switch FPT.self {
    case is Float.Type:
        let result = BJFloat.reversed() as Array<Float>
        return result.map { Helpers.makeFP($0) }
    case is Double.Type:
        let result = BJDouble.reversed() as Array<Double>
        return result.map { Helpers.makeFP($0) }
        #if arch(i386) || arch(x86_64)
    case is Float80.Type:
        let result = BJFloat80.reversed() as Array<Float80>
        return result.map { Helpers.makeFP($0) }
        #endif
    default:
        let result = BJDouble.reversed() as Array<Double>
        return result.map { Helpers.makeFP($0) }
    }
}
